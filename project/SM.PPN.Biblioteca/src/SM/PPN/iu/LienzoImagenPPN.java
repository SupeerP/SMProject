package SM.PPN.iu;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferedImage;

/**
 * Lienzo que hereda de LienzoPPN, impementando las operaciones necesarias para 
 * gestionar imágenes en él
 * @author Pedro Parrilla
 */
public class LienzoImagenPPN extends LienzoPPN {

    /**
     * Constructor por defecto
     */
    public LienzoImagenPPN() {
        super();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Asignación de la imagen del fondo
     * @param img Nueva imagen
     */
    public void setImagen(BufferedImage img) {
        this.img = img;
        if (img != null) {
            this.setPreferredSize(new Dimension(img.getWidth(), img.getHeight()));
        }
    }

    /**
     * Devolución de la imagen del panel con o sin las figuras
     * @param drawVector Indica si quiere las figuras o no
     * @return 
     */
    public BufferedImage getImagen(boolean drawVector) {
        if (drawVector) {
            BufferedImage aux = new BufferedImage(img.getWidth(), img.getHeight(), img.getType());
            this.paint(aux.createGraphics());
            return aux;
        } else {
            return img;
        }
    }
    
    /**
     * Devolución de la imagen del panel
     * @return Imagen del panel
     */
    
    public BufferedImage getImagen(){
        return img;
    }
    
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (img != null) {
            g.drawImage(img, 0, 0, this);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    /**
     * Variable que contiene la imagen del panel
     */
    
    private BufferedImage img = null;

}
