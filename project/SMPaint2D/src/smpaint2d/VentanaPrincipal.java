/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package smpaint2d;

import SM.PPN.graficos.FShapePPN;
import SM.PPN.graficos.LinePPN;
import SM.PPN.graficos.ShapePPN;
import SM.PPN.iu.DrawType;
import java.awt.Point;
import java.awt.Color;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import SM.PPN.imagen.ColorMaxOp;
import SM.PPN.imagen.ComponenteOp;
import SM.PPN.imagen.SepiaOp;
import SM.PPN.imagen.UmbralizacionOp;
import sm.image.EqualizationOp;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.TintOp;
import sm.sound.SMClipPlayer;
import sm.sound.SMSoundRecorder;

/**
 *
 * @author pparrilla
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        VentanaInterna vi = new VentanaInterna(this);
        jDesktop.add(vi);
        jDesktop.setSelectedFrame(vi);
        vi.setVisible(true);
        jBStopRecord.setVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bGDraw = new javax.swing.ButtonGroup();
        jDesktop = new javax.swing.JDesktopPane();
        jPanel1 = new javax.swing.JPanel();
        jLDrawType = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPImagen = new javax.swing.JPanel();
        jPBrillo = new javax.swing.JPanel();
        jSBrillo = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPContrasteF = new javax.swing.JPanel();
        jBContraste = new javax.swing.JButton();
        jBIluminar = new javax.swing.JButton();
        jBOscurecer = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JSeparator();
        jPFiltro = new javax.swing.JPanel();
        jCBFiltros = new javax.swing.JComboBox<>();
        jSeparator10 = new javax.swing.JSeparator();
        jPRotacion = new javax.swing.JPanel();
        jSRotate = new javax.swing.JSlider();
        JPEscala = new javax.swing.JPanel();
        jBScalePlus = new javax.swing.JButton();
        jBScaleMinus = new javax.swing.JButton();
        jSeparator12 = new javax.swing.JSeparator();
        jPFunciones = new javax.swing.JPanel();
        jBSeno = new javax.swing.JButton();
        jBSepia = new javax.swing.JButton();
        jBTinte = new javax.swing.JButton();
        jBEcualizador = new javax.swing.JButton();
        jSeparator11 = new javax.swing.JSeparator();
        jPColor = new javax.swing.JPanel();
        jBBandas = new javax.swing.JButton();
        jCBBandas = new javax.swing.JComboBox<>();
        jSeparator13 = new javax.swing.JSeparator();
        jPUmbral = new javax.swing.JPanel();
        jSUmbral = new javax.swing.JSlider();
        jBNegativo = new javax.swing.JButton();
        jBPPNLookupOp = new javax.swing.JButton();
        jBCompOp = new javax.swing.JButton();
        jBColorMax = new javax.swing.JButton();
        jSeparator14 = new javax.swing.JSeparator();
        jPSonido = new javax.swing.JPanel();
        jBCamRecord = new javax.swing.JButton();
        jBPlay = new javax.swing.JButton();
        jBStop = new javax.swing.JButton();
        jCBListaReproduccion = new javax.swing.JComboBox<>();
        jBRecord = new javax.swing.JButton();
        jBStopRecord = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPBarraEstados = new javax.swing.JPanel();
        jBNew = new javax.swing.JButton();
        jBOpen = new javax.swing.JButton();
        jBSave = new javax.swing.JButton();
        jBDuplicar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPBarraFormas = new javax.swing.JPanel();
        jTBLine = new javax.swing.JToggleButton();
        jTBRectangle = new javax.swing.JToggleButton();
        jTBEllipse = new javax.swing.JToggleButton();
        jBTranslate = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jPBarraAtrib = new javax.swing.JPanel();
        jBColorTrazo = new javax.swing.JButton();
        jTBFill = new javax.swing.JToggleButton();
        jBColorD1 = new javax.swing.JButton();
        jBColorD2 = new javax.swing.JButton();
        jBDHor = new javax.swing.JButton();
        jBDVer = new javax.swing.JButton();
        jCBShape = new javax.swing.JComboBox<>();
        jTBRender = new javax.swing.JToggleButton();
        jCBTrazo = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jSGrosor = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jSTrans = new javax.swing.JSpinner();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMArchivo = new javax.swing.JMenu();
        jMINuevo = new javax.swing.JMenuItem();
        jMIAbrir = new javax.swing.JMenuItem();
        jMIGuardar = new javax.swing.JMenuItem();
        jMIAbrirAudio = new javax.swing.JMenuItem();
        jMBGrabarAudio = new javax.swing.JMenuItem();
        jMVer = new javax.swing.JMenu();
        jCBMBarraEstado = new javax.swing.JCheckBoxMenuItem();
        jCBBarraFormas = new javax.swing.JCheckBoxMenuItem();
        jCBMBarraAtributos = new javax.swing.JCheckBoxMenuItem();
        jCBBarraImagen = new javax.swing.JCheckBoxMenuItem();
        jCBBarraSonido = new javax.swing.JCheckBoxMenuItem();
        jMAyuda = new javax.swing.JMenu();
        jCBMInfo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jDesktop.setPreferredSize(new java.awt.Dimension(700, 450));

        javax.swing.GroupLayout jDesktopLayout = new javax.swing.GroupLayout(jDesktop);
        jDesktop.setLayout(jDesktopLayout);
        jDesktopLayout.setHorizontalGroup(
            jDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2411, Short.MAX_VALUE)
        );
        jDesktopLayout.setVerticalGroup(
            jDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1104, Short.MAX_VALUE)
        );

        getContentPane().add(jDesktop, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jLDrawType, java.awt.BorderLayout.SOUTH);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPBrillo.setLayout(new java.awt.BorderLayout());

        jSBrillo.setMaximum(255);
        jSBrillo.setMinimum(-255);
        jSBrillo.setValue(0);
        jSBrillo.setPreferredSize(new java.awt.Dimension(70, 16));
        jSBrillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSBrilloStateChanged(evt);
            }
        });
        jSBrillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jSBrilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jSBrilloFocusLost(evt);
            }
        });
        jPBrillo.add(jSBrillo, java.awt.BorderLayout.CENTER);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/brillo+.png"))); // NOI18N
        jLabel2.setAlignmentY(0.0F);
        jLabel2.setMaximumSize(new java.awt.Dimension(10, 10));
        jLabel2.setMinimumSize(new java.awt.Dimension(10, 10));
        jPBrillo.add(jLabel2, java.awt.BorderLayout.EAST);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_brightness_7_black_18dp.png"))); // NOI18N
        jLabel1.setAlignmentY(0.0F);
        jLabel1.setMaximumSize(new java.awt.Dimension(10, 10));
        jLabel1.setMinimumSize(new java.awt.Dimension(10, 10));
        jPBrillo.add(jLabel1, java.awt.BorderLayout.WEST);

        jPImagen.add(jPBrillo);
        jPBrillo.getAccessibleContext().setAccessibleDescription("Brillo");

        jBContraste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/contraste.png"))); // NOI18N
        jBContraste.setMaximumSize(new java.awt.Dimension(35, 35));
        jBContraste.setPreferredSize(new java.awt.Dimension(35, 35));
        jBContraste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBContrasteActionPerformed(evt);
            }
        });
        jPContrasteF.add(jBContraste);

        jBIluminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iluminar.png"))); // NOI18N
        jBIluminar.setPreferredSize(new java.awt.Dimension(35, 35));
        jBIluminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBIluminarActionPerformed(evt);
            }
        });
        jPContrasteF.add(jBIluminar);

        jBOscurecer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/oscurecer.png"))); // NOI18N
        jBOscurecer.setPreferredSize(new java.awt.Dimension(35, 35));
        jBOscurecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBOscurecerActionPerformed(evt);
            }
        });
        jPContrasteF.add(jBOscurecer);

        jPImagen.add(jPContrasteF);

        jSeparator9.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator9.setPreferredSize(new java.awt.Dimension(1, 30));
        jPImagen.add(jSeparator9);

        jCBFiltros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Fronteras", "Ninguno" }));
        jCBFiltros.setSelectedIndex(5);
        jCBFiltros.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBFiltrosItemStateChanged(evt);
            }
        });
        jCBFiltros.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCBFiltrosFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jCBFiltrosFocusLost(evt);
            }
        });
        jPFiltro.add(jCBFiltros);

        jPImagen.add(jPFiltro);

        jSeparator10.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator10.setPreferredSize(new java.awt.Dimension(1, 30));
        jPImagen.add(jSeparator10);

        jSRotate.setMaximum(360);
        jSRotate.setValue(0);
        jSRotate.setPreferredSize(new java.awt.Dimension(70, 16));
        jSRotate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSRotateStateChanged(evt);
            }
        });
        jSRotate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jSRotateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jSRotateFocusLost(evt);
            }
        });
        jPRotacion.add(jSRotate);

        jPImagen.add(jPRotacion);

        jBScalePlus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_zoom_in_black_18dp.png"))); // NOI18N
        jBScalePlus.setPreferredSize(new java.awt.Dimension(35, 35));
        jBScalePlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBScalePlusActionPerformed(evt);
            }
        });
        JPEscala.add(jBScalePlus);

        jBScaleMinus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_zoom_out_black_18dp.png"))); // NOI18N
        jBScaleMinus.setPreferredSize(new java.awt.Dimension(35, 35));
        jBScaleMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBScaleMinusActionPerformed(evt);
            }
        });
        JPEscala.add(jBScaleMinus);

        jPImagen.add(JPEscala);

        jSeparator12.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator12.setPreferredSize(new java.awt.Dimension(1, 30));
        jPImagen.add(jSeparator12);

        jBSeno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_timeline_black_18dp.png"))); // NOI18N
        jBSeno.setFocusable(false);
        jBSeno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBSeno.setPreferredSize(new java.awt.Dimension(35, 35));
        jBSeno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBSeno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSenoActionPerformed(evt);
            }
        });
        jPFunciones.add(jBSeno);

        jBSepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_color_lens_black_18dp.png"))); // NOI18N
        jBSepia.setPreferredSize(new java.awt.Dimension(35, 35));
        jBSepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSepiaActionPerformed(evt);
            }
        });
        jPFunciones.add(jBSepia);

        jBTinte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_colorize_black_18dp.png"))); // NOI18N
        jBTinte.setPreferredSize(new java.awt.Dimension(35, 35));
        jBTinte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTinteActionPerformed(evt);
            }
        });
        jPFunciones.add(jBTinte);

        jBEcualizador.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_equalizer_black_18dp.png"))); // NOI18N
        jBEcualizador.setPreferredSize(new java.awt.Dimension(35, 35));
        jBEcualizador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEcualizadorActionPerformed(evt);
            }
        });
        jPFunciones.add(jBEcualizador);

        jPImagen.add(jPFunciones);

        jSeparator11.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator11.setPreferredSize(new java.awt.Dimension(1, 30));
        jPImagen.add(jSeparator11);

        jBBandas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_layers_black_18dp.png"))); // NOI18N
        jBBandas.setPreferredSize(new java.awt.Dimension(35, 35));
        jBBandas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBandasActionPerformed(evt);
            }
        });
        jPColor.add(jBBandas);

        jCBBandas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RGB", "YCC", "GREY" }));
        jCBBandas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBBandasActionPerformed(evt);
            }
        });
        jPColor.add(jCBBandas);

        jPImagen.add(jPColor);

        jSeparator13.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator13.setPreferredSize(new java.awt.Dimension(1, 30));
        jPImagen.add(jSeparator13);

        jPUmbral.setLayout(new java.awt.BorderLayout());

        jSUmbral.setMaximum(255);
        jSUmbral.setValue(122);
        jSUmbral.setPreferredSize(new java.awt.Dimension(70, 16));
        jSUmbral.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSUmbralStateChanged(evt);
            }
        });
        jSUmbral.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jSUmbralFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jSUmbralFocusLost(evt);
            }
        });
        jPUmbral.add(jSUmbral, java.awt.BorderLayout.CENTER);

        jPImagen.add(jPUmbral);

        jBNegativo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_compare_black_18dp.png"))); // NOI18N
        jBNegativo.setPreferredSize(new java.awt.Dimension(35, 35));
        jBNegativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNegativoActionPerformed(evt);
            }
        });
        jPImagen.add(jBNegativo);

        jBPPNLookupOp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_filter_1_black_18dp.png"))); // NOI18N
        jBPPNLookupOp.setPreferredSize(new java.awt.Dimension(35, 35));
        jBPPNLookupOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPPNLookupOpActionPerformed(evt);
            }
        });
        jPImagen.add(jBPPNLookupOp);

        jBCompOp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_filter_2_black_18dp.png"))); // NOI18N
        jBCompOp.setPreferredSize(new java.awt.Dimension(35, 35));
        jBCompOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCompOpActionPerformed(evt);
            }
        });
        jPImagen.add(jBCompOp);

        jBColorMax.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_filter_3_black_18dp.png"))); // NOI18N
        jBColorMax.setPreferredSize(new java.awt.Dimension(35, 35));
        jBColorMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBColorMaxActionPerformed(evt);
            }
        });
        jPImagen.add(jBColorMax);

        jPanel3.add(jPImagen);

        jSeparator14.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator14.setPreferredSize(new java.awt.Dimension(1, 30));
        jPanel3.add(jSeparator14);

        jBCamRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_camera_alt_black_18dp.png"))); // NOI18N
        jBCamRecord.setFocusable(false);
        jBCamRecord.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBCamRecord.setPreferredSize(new java.awt.Dimension(35, 35));
        jBCamRecord.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBCamRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCamRecordActionPerformed(evt);
            }
        });
        jPSonido.add(jBCamRecord);

        jBPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_play_arrow_black_18dp.png"))); // NOI18N
        jBPlay.setFocusable(false);
        jBPlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBPlay.setPreferredSize(new java.awt.Dimension(35, 35));
        jBPlay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPlayActionPerformed(evt);
            }
        });
        jPSonido.add(jBPlay);

        jBStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_stop_black_18dp.png"))); // NOI18N
        jBStop.setFocusable(false);
        jBStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBStop.setPreferredSize(new java.awt.Dimension(35, 35));
        jBStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBStopActionPerformed(evt);
            }
        });
        jPSonido.add(jBStop);

        jPSonido.add(jCBListaReproduccion);

        jBRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_mic_black_18dp.png"))); // NOI18N
        jBRecord.setFocusable(false);
        jBRecord.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBRecord.setPreferredSize(new java.awt.Dimension(35, 35));
        jBRecord.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBRecordActionPerformed(evt);
            }
        });
        jPSonido.add(jBRecord);

        jBStopRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_mic_off_black_18dp.png"))); // NOI18N
        jBStopRecord.setFocusable(false);
        jBStopRecord.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBStopRecord.setPreferredSize(new java.awt.Dimension(35, 35));
        jBStopRecord.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBStopRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBStopRecordActionPerformed(evt);
            }
        });
        jPSonido.add(jBStopRecord);

        jPanel3.add(jPSonido);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jPanel2.setPreferredSize(new java.awt.Dimension(0, 55));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jBNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_open_in_new_black_18dp.png"))); // NOI18N
        jBNew.setFocusable(false);
        jBNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBNew.setPreferredSize(new java.awt.Dimension(35, 35));
        jBNew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNewActionPerformed(evt);
            }
        });
        jPBarraEstados.add(jBNew);

        jBOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_folder_open_black_18dp.png"))); // NOI18N
        jBOpen.setFocusable(false);
        jBOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBOpen.setPreferredSize(new java.awt.Dimension(35, 35));
        jBOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBOpenActionPerformed(evt);
            }
        });
        jPBarraEstados.add(jBOpen);

        jBSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_save_black_18dp.png"))); // NOI18N
        jBSave.setFocusable(false);
        jBSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBSave.setPreferredSize(new java.awt.Dimension(35, 35));
        jBSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSaveActionPerformed(evt);
            }
        });
        jPBarraEstados.add(jBSave);

        jBDuplicar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_filter_black_18dp.png"))); // NOI18N
        jBDuplicar.setPreferredSize(new java.awt.Dimension(35, 35));
        jBDuplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDuplicarActionPerformed(evt);
            }
        });
        jPBarraEstados.add(jBDuplicar);

        jPanel2.add(jPBarraEstados);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setPreferredSize(new java.awt.Dimension(1, 30));
        jPanel2.add(jSeparator1);

        bGDraw.add(jTBLine);
        jTBLine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/linea.png"))); // NOI18N
        jTBLine.setFocusable(false);
        jTBLine.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jTBLine.setPreferredSize(new java.awt.Dimension(35, 35));
        jTBLine.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jTBLine.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTBLineMouseClicked(evt);
            }
        });
        jPBarraFormas.add(jTBLine);

        bGDraw.add(jTBRectangle);
        jTBRectangle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/rectangulo.png"))); // NOI18N
        jTBRectangle.setFocusable(false);
        jTBRectangle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jTBRectangle.setPreferredSize(new java.awt.Dimension(35, 35));
        jTBRectangle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jTBRectangle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTBRectangleMouseClicked(evt);
            }
        });
        jPBarraFormas.add(jTBRectangle);

        bGDraw.add(jTBEllipse);
        jTBEllipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/elipse.png"))); // NOI18N
        jTBEllipse.setFocusable(false);
        jTBEllipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jTBEllipse.setPreferredSize(new java.awt.Dimension(35, 35));
        jTBEllipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jTBEllipse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTBEllipseMouseClicked(evt);
            }
        });
        jPBarraFormas.add(jTBEllipse);

        jBTranslate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_open_with_black_18dp.png"))); // NOI18N
        jBTranslate.setPreferredSize(new java.awt.Dimension(35, 35));
        jBTranslate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTranslateActionPerformed(evt);
            }
        });
        jPBarraFormas.add(jBTranslate);

        jPanel2.add(jPBarraFormas);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setPreferredSize(new java.awt.Dimension(1, 30));
        jPanel2.add(jSeparator2);

        jBColorTrazo.setBackground(new java.awt.Color(1, 1, 1));
        jBColorTrazo.setPreferredSize(new java.awt.Dimension(30, 30));
        jBColorTrazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBColorTrazoActionPerformed(evt);
            }
        });
        jPBarraAtrib.add(jBColorTrazo);

        jTBFill.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_format_color_fill_black_18dp.png"))); // NOI18N
        jTBFill.setFocusable(false);
        jTBFill.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jTBFill.setPreferredSize(new java.awt.Dimension(35, 35));
        jTBFill.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jTBFill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTBFillActionPerformed(evt);
            }
        });
        jPBarraAtrib.add(jTBFill);

        jBColorD1.setBackground(new java.awt.Color(1, 1, 1));
        jBColorD1.setPreferredSize(new java.awt.Dimension(30, 30));
        jBColorD1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBColorD1ActionPerformed(evt);
            }
        });
        jPBarraAtrib.add(jBColorD1);

        jBColorD2.setBackground(new java.awt.Color(1, 1, 1));
        jBColorD2.setPreferredSize(new java.awt.Dimension(30, 30));
        jBColorD2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBColorD2ActionPerformed(evt);
            }
        });
        jPBarraAtrib.add(jBColorD2);

        jBDHor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_swap_horiz_black_18dp.png"))); // NOI18N
        jBDHor.setPreferredSize(new java.awt.Dimension(35, 35));
        jBDHor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDHorActionPerformed(evt);
            }
        });
        jPBarraAtrib.add(jBDHor);

        jBDVer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_swap_vert_black_18dp.png"))); // NOI18N
        jBDVer.setPreferredSize(new java.awt.Dimension(35, 35));
        jBDVer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDVerActionPerformed(evt);
            }
        });
        jPBarraAtrib.add(jBDVer);

        jCBShape.setToolTipText("");
        jCBShape.setPreferredSize(new java.awt.Dimension(110, 29));
        jCBShape.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBShapeItemStateChanged(evt);
            }
        });
        jPBarraAtrib.add(jCBShape);

        jTBRender.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/alisar.png"))); // NOI18N
        jTBRender.setFocusable(false);
        jTBRender.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jTBRender.setPreferredSize(new java.awt.Dimension(35, 35));
        jTBRender.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jTBRender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTBRenderActionPerformed(evt);
            }
        });
        jPBarraAtrib.add(jTBRender);

        jCBTrazo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Continuo", "Punto", "Linea" }));
        jCBTrazo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBTrazoItemStateChanged(evt);
            }
        });
        jPBarraAtrib.add(jCBTrazo);

        jLabel3.setText("Grosor:");
        jPBarraAtrib.add(jLabel3);

        jSGrosor.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        jSGrosor.setPreferredSize(new java.awt.Dimension(70, 30));
        jSGrosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSGrosorStateChanged(evt);
            }
        });
        jPBarraAtrib.add(jSGrosor);

        jLabel4.setText("Transparencia:");
        jPBarraAtrib.add(jLabel4);

        jSTrans.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.1f)));
        jSTrans.setPreferredSize(new java.awt.Dimension(70, 30));
        jSTrans.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSTransStateChanged(evt);
            }
        });
        jPBarraAtrib.add(jSTrans);

        jPanel2.add(jPBarraAtrib);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        jMArchivo.setText("Archivo");

        jMINuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK));
        jMINuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_open_in_new_black_18dp.png"))); // NOI18N
        jMINuevo.setText("Nuevo");
        jMINuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMINuevoActionPerformed(evt);
            }
        });
        jMArchivo.add(jMINuevo);

        jMIAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        jMIAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_folder_open_black_18dp.png"))); // NOI18N
        jMIAbrir.setText("Abrir");
        jMIAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIAbrirActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIAbrir);

        jMIGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK));
        jMIGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_save_black_18dp.png"))); // NOI18N
        jMIGuardar.setText("Guardar");
        jMIGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIGuardarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIGuardar);

        jMIAbrirAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_play_arrow_black_18dp.png"))); // NOI18N
        jMIAbrirAudio.setText("Abrir audio");
        jMIAbrirAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIAbrirAudioActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIAbrirAudio);

        jMBGrabarAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/baseline_mic_black_18dp.png"))); // NOI18N
        jMBGrabarAudio.setText("Grabar audio");
        jMArchivo.add(jMBGrabarAudio);

        jMenuBar1.add(jMArchivo);

        jMVer.setText("Ver");

        jCBMBarraEstado.setSelected(true);
        jCBMBarraEstado.setText("Barra de estados");
        jCBMBarraEstado.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCBMBarraEstadoStateChanged(evt);
            }
        });
        jMVer.add(jCBMBarraEstado);

        jCBBarraFormas.setSelected(true);
        jCBBarraFormas.setText("Barra de formas");
        jCBBarraFormas.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCBBarraFormasStateChanged(evt);
            }
        });
        jMVer.add(jCBBarraFormas);

        jCBMBarraAtributos.setSelected(true);
        jCBMBarraAtributos.setText("Barra de atributos");
        jCBMBarraAtributos.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCBMBarraAtributosStateChanged(evt);
            }
        });
        jMVer.add(jCBMBarraAtributos);

        jCBBarraImagen.setSelected(true);
        jCBBarraImagen.setText("Barra de imagen");
        jCBBarraImagen.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCBBarraImagenStateChanged(evt);
            }
        });
        jMVer.add(jCBBarraImagen);

        jCBBarraSonido.setSelected(true);
        jCBBarraSonido.setText("Barra de sonido");
        jCBBarraSonido.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCBBarraSonidoStateChanged(evt);
            }
        });
        jMVer.add(jCBBarraSonido);

        jMenuBar1.add(jMVer);

        jMAyuda.setText("Ayuda");

        jCBMInfo.setText("Información");
        jCBMInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBMInfoActionPerformed(evt);
            }
        });
        jMAyuda.add(jCBMInfo);

        jMenuBar1.add(jMAyuda);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTBLineMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTBLineMouseClicked
        this.setDrawType(DrawType.LINE);
        jTBFill.setSelected(false);
        jCBShape.setSelectedItem(null);
        deleteSelectedShape();
    }//GEN-LAST:event_jTBLineMouseClicked

    private void jTBRectangleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTBRectangleMouseClicked
        this.setDrawType(DrawType.RECTANGLE);
        jCBShape.setSelectedItem(null);
        jCBShape.setSelectedItem(null);
        deleteSelectedShape();
    }//GEN-LAST:event_jTBRectangleMouseClicked

    private void jTBEllipseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTBEllipseMouseClicked
        this.setDrawType(DrawType.ELLIPSE);
        jCBShape.setSelectedItem(null);
        jCBShape.setSelectedItem(null);
        deleteSelectedShape();
    }//GEN-LAST:event_jTBEllipseMouseClicked

    private void jBNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNewActionPerformed
        SizePanelPPN size = new SizePanelPPN(this, true);
        size.setVisible(true);
        if( size.getW() > 10 && size.getH() > 10 )
            this.newVentanaInterna(size.getW(), size.getH());
    }//GEN-LAST:event_jBNewActionPerformed

    private void jMINuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMINuevoActionPerformed
        this.newVentanaInterna();
    }//GEN-LAST:event_jMINuevoActionPerformed

    private void jMIAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIAbrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        dlg.setFileFilter(new FileNameExtensionFilter("Video(.mp4, .mkv, .avi)", "mp4", "mkv", "avi"));
        dlg.setFileFilter(new FileNameExtensionFilter("Sonido(.wav, .au)", "wav", "au"));
        dlg.setFileFilter(new FileNameExtensionFilter("Imagen(.jpg, .png, .gif)", "jpg", "png", "gif"));
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = new File(dlg.getSelectedFile().getAbsolutePath()){
                    @Override
                    public String toString(){
                        return this.getName();
                    }
                };               
                
                String[] name = f.toString().split("\\.");
                
                switch (name[1]) {
                    case "png":
                    case "jpeg":
                    case "jpg":
                    case "gif":
                        BufferedImage img = ImageIO.read(f);
                        VentanaInterna vi = new VentanaInterna(this);
                        vi.getLienzo().setImagen(img);
                        this.jDesktop.add(vi);
                        vi.setTitle(f.getName());
                        vi.setVisible(true);
                        break;
                    case "wav":
                    case "au":
                        this.jCBListaReproduccion.addItem(f);
                        this.jCBListaReproduccion.setSelectedItem(f);
                        break;
                    case "mp4":
                    case "avi":
                    case "mkv":
                        VentanaInternaVLCPlayer vlcplayer = VentanaInternaVLCPlayer.getInstance(f);
                        if( vlcplayer != null ){
                            this.jDesktop.add(vlcplayer);
                            vlcplayer.setTitle(f.getName());
                            vlcplayer.setVisible(true);
                        }
                        break;
                    default:
                        System.err.println("Archivo no soportado");
                        break;
                }
            } catch (IOException ex) {
                System.err.println("Error al leer el fichero");
            }
        }
    }//GEN-LAST:event_jMIAbrirActionPerformed

    private void jMIGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIGuardarActionPerformed
        VentanaInterna vi = (VentanaInterna) this.jDesktop.getSelectedFrame();
        if (vi != null) {
            JFileChooser dlg = new JFileChooser();
            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION) {
                try {
                    BufferedImage img = vi.getLienzo().getImagen(true);
                    if (img != null) {
                        File f = dlg.getSelectedFile();
                        ImageIO.write(img, "jpg", f);
                        vi.setTitle(f.getName());
                    }
                } catch (IOException ex) {
                    System.err.println("Error al guardar la imagen");
                }
            }
        }
    }//GEN-LAST:event_jMIGuardarActionPerformed

    private void jTBFillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTBFillActionPerformed
        VentanaInterna vi = (VentanaInterna) this.jDesktop.getSelectedFrame();
        if( vi != null ){
            vi.getLienzo().setIsRelleno(this.jTBFill.isSelected());
            if( jCBShape.getSelectedItem() != null && !(jCBShape.getSelectedItem() instanceof LinePPN) ){
                FShapePPN shape = (FShapePPN)jCBShape.getSelectedItem();
                shape.setIsRelleno(this.jTBFill.isSelected());
                shape.setFcolor1(jBColorD1.getBackground());
                shape.setFcolor2(jBColorD2.getBackground());
                vi.getLienzo().repaint();
            }
        }
        
    }//GEN-LAST:event_jTBFillActionPerformed

    private void jTBRenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTBRenderActionPerformed
        VentanaInterna vi = (VentanaInterna) this.jDesktop.getSelectedFrame();
        vi.getLienzo().setIsRender(this.jTBRender.isSelected());
    }//GEN-LAST:event_jTBRenderActionPerformed

    private void jSGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSGrosorStateChanged
        VentanaInterna vi = (VentanaInterna) this.jDesktop.getSelectedFrame();
        vi.getLienzo().setgTrazo((int) this.jSGrosor.getValue());
    }//GEN-LAST:event_jSGrosorStateChanged

    private void jBOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBOpenActionPerformed
        this.jMIAbrirActionPerformed(evt);
    }//GEN-LAST:event_jBOpenActionPerformed

    private void jBSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSaveActionPerformed
        this.jMIGuardarActionPerformed(evt);
    }//GEN-LAST:event_jBSaveActionPerformed

    /**
     * Función que se ejecuta al modificar la selección del ComboBox
     * @param evt Evento generado
     */
    private void jCBShapeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBShapeItemStateChanged
        VentanaInterna vi = (VentanaInterna) this.jDesktop.getSelectedFrame();
        if( vi != null && jCBShape.getSelectedItem() != null 
                && jCBShape.hasFocus()){
            this.bGDraw.clearSelection();
            this.jLDrawType.setText("");
            this.setDrawType(DrawType.MOVE);
            this.jSGrosor.setValue(((ShapePPN) jCBShape.getSelectedItem()).getTrazo().getGrosor());
            this.jBColorTrazo.setBackground(((ShapePPN) jCBShape.getSelectedItem()).getTrazo().getColor());
            this.jCBTrazo.setSelectedIndex(((ShapePPN) jCBShape.getSelectedItem()).getTrazo().getTipoTrazo());
            this.jTBRender.setSelected(((ShapePPN) jCBShape.getSelectedItem()).getRender());
            jSTrans.setValue(((ShapePPN) jCBShape.getSelectedItem()).getTransp());
            if( jCBShape.getSelectedItem() instanceof LinePPN ){
                this.jTBFill.setSelected(false);
            } else {
                FShapePPN shape = ((FShapePPN)jCBShape.getSelectedItem());
                this.jTBFill.setSelected(shape.getIsRelleno());
                this.jBColorD1.setBackground(shape.getFcolor1());
                this.jBColorD2.setBackground(shape.getFcolor2());
            }
            vi.getLienzo().setSelected(jCBShape.getSelectedIndex());
        }
    }//GEN-LAST:event_jCBShapeItemStateChanged

    private void jCBMBarraEstadoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCBMBarraEstadoStateChanged
        this.jPBarraEstados.setVisible(this.jCBMBarraEstado.getState());
    }//GEN-LAST:event_jCBMBarraEstadoStateChanged

    private void jCBBarraFormasStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCBBarraFormasStateChanged
        this.jPBarraFormas.setVisible(this.jCBBarraFormas.getState());
    }//GEN-LAST:event_jCBBarraFormasStateChanged

    private void jCBMBarraAtributosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCBMBarraAtributosStateChanged
        this.jPBarraAtrib.setVisible(this.jCBMBarraAtributos.getState());
    }//GEN-LAST:event_jCBMBarraAtributosStateChanged

    private void jBScalePlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBScalePlusActionPerformed
        this.zoomImagen(1.25);
    }//GEN-LAST:event_jBScalePlusActionPerformed

    private void jBScaleMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBScaleMinusActionPerformed
        this.zoomImagen(0.75);
    }//GEN-LAST:event_jBScaleMinusActionPerformed

    private void jBSenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSenoActionPerformed
        VentanaInterna vi = (VentanaInterna) (this.jDesktop.getSelectedFrame());

        if(vi != null){
            this.imgSource = vi.getLienzo().getImagen();
            if(this.imgSource != null){
                try{
                    double k = 255.0;
                    double w = 180.0/255.0;
                    byte lt[] = new byte[256];
                    lt[0] = 0;
                    for(int i = 1; i < 256; i++ )
                        lt[i] = (byte) (k*Math.abs(Math.sin(Math.toRadians(i*w))));
                    
                    ByteLookupTable bt = new ByteLookupTable(0, lt);
                    LookupTable lot = bt;
                    LookupOp lop = new LookupOp(lot, null);
                    lop.filter(this.imgSource, this.imgSource);
                    vi.getLienzo().repaint();

                }catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jBSenoActionPerformed

    private void jBOscurecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBOscurecerActionPerformed
        VentanaInterna vi = (VentanaInterna) (jDesktop.getSelectedFrame());
        if( vi != null ){
            this.imgSource = vi.getLienzo().getImagen();
            if( this.imgSource != null ){
                try{
                    int type = LookupTableProducer.TYPE_POWER;
                    LookupTable lt = LookupTableProducer.powerFuction(type);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(imgSource, imgSource);
                    vi.repaint();
                }catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jBOscurecerActionPerformed

    private void jBIluminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBIluminarActionPerformed
        VentanaInterna vi = (VentanaInterna) (jDesktop.getSelectedFrame());
        if( vi != null ){
            this.imgSource = vi.getLienzo().getImagen();
            if( this.imgSource != null ){
                try{
                    int type = LookupTableProducer.TYPE_LOGARITHM;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(imgSource, imgSource);
                    vi.repaint();
                }catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jBIluminarActionPerformed

    private void jBContrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBContrasteActionPerformed
        VentanaInterna vi = (VentanaInterna) (jDesktop.getSelectedFrame());
        if( vi != null ){
            this.imgSource = vi.getLienzo().getImagen();
            if( this.imgSource != null ){
                try{
                    int type = LookupTableProducer.TYPE_SFUNCION;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(imgSource, imgSource);
                    vi.repaint();
                }catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }

    }//GEN-LAST:event_jBContrasteActionPerformed

    private void jCBFiltrosFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCBFiltrosFocusLost
        this.imgSource = null;
    }//GEN-LAST:event_jCBFiltrosFocusLost

    private void jCBFiltrosFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCBFiltrosFocusGained
        this.addFocusItemToImage();
    }//GEN-LAST:event_jCBFiltrosFocusGained

    private void jCBFiltrosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBFiltrosItemStateChanged
        VentanaInterna vi = (VentanaInterna) (jDesktop.getSelectedFrame());
        if (vi != null) {
            if (imgSource != null) {
                try {
                    Kernel k = null;
                    System.out.println("Entra\n");

                    switch (this.jCBFiltros.getSelectedIndex()) {
                        case 0:     // Media
                        k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                        break;
                        case 1:     // Binomial
                        k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                        break;
                        case 2:     // Enfoque
                        k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                        break;
                        case 3:     // Relieve
                        k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                        break;
                        case 4:     // Frontera
                        k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                        break;
                        case 5:     // Ninguno
                        ColorModel cm = imgSource.getColorModel();
                        WritableRaster raster = imgSource.copyData(null);
                        boolean alfaPre = imgSource.isAlphaPremultiplied();
                        vi.getLienzo().setImagen(new BufferedImage(cm, raster, alfaPre, null));
                        break;
                    }
                    if (k != null) {
                        ConvolveOp cop = new ConvolveOp(k);
                        cop.filter(imgSource, vi.getLienzo().getImagen());

                    }
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jCBFiltrosItemStateChanged

    private void jSBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSBrilloFocusLost
        this.imgSource = null;
        this.jSBrillo.setValue(0);
    }//GEN-LAST:event_jSBrilloFocusLost

    private void jSBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSBrilloFocusGained
        this.addFocusItemToImage();
    }//GEN-LAST:event_jSBrilloFocusGained

    private void jSBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSBrilloStateChanged
        VentanaInterna vi = (VentanaInterna) (jDesktop.getSelectedFrame());
        if (vi != null) {
            if (imgSource != null) {
                try {
                    RescaleOp rop = new RescaleOp(1.0F, this.jSBrillo.getValue(), null);
                    rop.filter(this.imgSource, vi.getLienzo().getImagen());
                    vi.getLienzo().repaint();
                    this.repaintAllFrames();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jSBrilloStateChanged

    private void jBBandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBandasActionPerformed
        VentanaInterna vi = (VentanaInterna) (this.jDesktop.getSelectedFrame());
        if(vi != null){
            this.imgSource = vi.getLienzo().getImagen();
            if (this.imgSource != null) {
                try{
                    WritableRaster srcRaster = this.imgSource.getRaster();
                    for( int band = 0; band < srcRaster.getNumBands(); ++band ){
                        ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                        ComponentColorModel cm = new ComponentColorModel( cs, false, false,
                            Transparency.OPAQUE, DataBuffer.TYPE_BYTE);
                        
                        int bandList[] = {band};
                        WritableRaster bandRaster = (WritableRaster)this.imgSource.getRaster().
                                createWritableChild(0, 0, this.imgSource.getWidth(), this.imgSource.getHeight(),
                                        0, 0, bandList);
                        BufferedImage imgBanda = new BufferedImage(cm, bandRaster, false, null);
                        
                        VentanaInterna vi_aux = this.newVentanaInterna();
                        vi_aux.getLienzo().setImagen(imgBanda);
                        vi_aux.setTitle("Banda [" + band + "]");
                    }
                    
                } catch(IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
                this.imgSource = null;
            }
            
        }
        
    }//GEN-LAST:event_jBBandasActionPerformed

    private void jCBBandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBBandasActionPerformed
        VentanaInterna vi = (VentanaInterna) (this.jDesktop.getSelectedFrame());
        
        if(vi != null){
            this.imgSource = vi.getLienzo().getImagen();
            if(this.imgSource != null){
                try{
                    switch(this.jCBBandas.getSelectedIndex()){
                        case 0:
                            if(this.imgSource.getColorModel().getColorSpace() 
                                    != ColorSpace.getInstance(ColorSpace.CS_sRGB)){
                                ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                                ColorConvertOp cop = new ColorConvertOp(cs, null);
                                BufferedImage imgOut = cop.filter(this.imgSource, null);
                                VentanaInterna vi_aux = this.newVentanaInterna();
                                vi_aux.getLienzo().setImagen(imgOut);
                                vi_aux.setTitle("Espacio [RGB]");
                            }
                            break;
                        case 1:
                            if(this.imgSource.getColorModel().getColorSpace() 
                                    != ColorSpace.getInstance(ColorSpace.CS_PYCC)){
                                ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                                ColorConvertOp cop = new ColorConvertOp(cs, null);
                                BufferedImage imgOut = cop.filter(this.imgSource, null);
                                VentanaInterna vi_aux = this.newVentanaInterna();
                                vi_aux.getLienzo().setImagen(imgOut);
                                vi_aux.setTitle("Espacio [YCC]");
                            }
                            break;
                        case 2:
                            if(this.imgSource.getColorModel().getColorSpace() 
                                    != ColorSpace.getInstance(ColorSpace.CS_GRAY)){
                                ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                                ColorConvertOp cop = new ColorConvertOp(cs, null);
                                BufferedImage imgOut = cop.filter(this.imgSource, null);
                                VentanaInterna vi_aux = this.newVentanaInterna();
                                vi_aux.getLienzo().setImagen(imgOut);
                                vi_aux.setTitle("Espacio [GREY]");
                            }
                            break;
                    }
                    
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            this.imgSource = null;
            }
        }
    }//GEN-LAST:event_jCBBandasActionPerformed

    private void jBTinteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTinteActionPerformed
        VentanaInterna vi = (VentanaInterna) (jDesktop.getSelectedFrame());
        if(vi != null){
            this.imgSource = vi.getLienzo().getImagen();
            if(this.imgSource != null ){
                try{
                    TintOp tintado = new TintOp((Color) jBColorTrazo.getBackground(), 0.5f);
                    tintado.filter(imgSource, vi.getLienzo().getImagen());
                    vi.getLienzo().repaint();
                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
            this.imgSource = null;
        }
    }//GEN-LAST:event_jBTinteActionPerformed

    private void jBEcualizadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEcualizadorActionPerformed
        VentanaInterna vi = (VentanaInterna) (this.jDesktop.getSelectedFrame());
        if(vi != null){
            this.imgSource = vi.getLienzo().getImagen();
            if(this.imgSource != null ){
                try{
                    ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                    ColorConvertOp cop = new ColorConvertOp(cs, null);
                    cop.filter(this.imgSource, this.imgSource);
                    EqualizationOp ecualizacion = new EqualizationOp();
                    ecualizacion.filter(imgSource, vi.getLienzo().getImagen());
                    vi.getLienzo().repaint();
                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
            this.imgSource = null;
        }
    }//GEN-LAST:event_jBEcualizadorActionPerformed

    private void jBSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSepiaActionPerformed
        VentanaInterna vi = (VentanaInterna) (this.jDesktop.getSelectedFrame());
        if(vi != null){
            this.imgSource = vi.getLienzo().getImagen();
            if(this.imgSource != null ){
                try{
                    SepiaOp sepia = new SepiaOp();
                    sepia.filter(imgSource, vi.getLienzo().getImagen());
                    vi.getLienzo().repaint();
                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
            this.imgSource = null;
        }
    }//GEN-LAST:event_jBSepiaActionPerformed

    private void jSUmbralFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSUmbralFocusGained
        this.addFocusItemToImage();
    }//GEN-LAST:event_jSUmbralFocusGained

    private void jSUmbralFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSUmbralFocusLost
        this.jSUmbral.setValue(122);
        this.imgSource = null;
    }//GEN-LAST:event_jSUmbralFocusLost

    private void jSUmbralStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSUmbralStateChanged
        VentanaInterna vi = (VentanaInterna) (jDesktop.getSelectedFrame());
        if (vi != null) {
            if (imgSource != null) {
                try {
                    if(this.imgSource.getColorModel().getColorSpace() 
                                    != ColorSpace.getInstance(ColorSpace.CS_GRAY)){
                                ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                                ColorConvertOp cop = new ColorConvertOp(cs, null);
                                cop.filter(this.imgSource, vi.getLienzo().getImagen());
                    }
                    UmbralizacionOp umbral = new UmbralizacionOp(this.jSUmbral.getValue());
                    umbral.filter(this.imgSource, vi.getLienzo().getImagen());
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jSUmbralStateChanged

    private void jBPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPlayActionPerformed
        if( jDesktop.getSelectedFrame() instanceof VentanaInternaVLCPlayer){
            VentanaInternaVLCPlayer vPlayer = (VentanaInternaVLCPlayer) jDesktop.getSelectedFrame();
            vPlayer.play();
        } else {
            File f = (File) this.jCBListaReproduccion.getSelectedItem();
            if( f != null ){
                player = new SMClipPlayer(f);
                if( player != null ){
                    player.play();
                }
            }
        }
    }//GEN-LAST:event_jBPlayActionPerformed

    private void jBStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBStopActionPerformed
        if( jDesktop.getSelectedFrame() instanceof VentanaInternaVLCPlayer){
            VentanaInternaVLCPlayer vPlayer = (VentanaInternaVLCPlayer) jDesktop.getSelectedFrame();
            vPlayer.stop();
        } else if( player != null ){
            player.stop();
        }
    }//GEN-LAST:event_jBStopActionPerformed

    private void jBRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBRecordActionPerformed
        this.jBRecord.setVisible(false);
        this.jBStopRecord.setVisible(true);
        this.recordfile = new File("recorder");
        recorder = new SMSoundRecorder(recordfile);
        if(player != null ){
            recorder.record();
        }
        
    }//GEN-LAST:event_jBRecordActionPerformed

    private void jMIAbrirAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIAbrirAudioActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = new File( dlg.getSelectedFile().getPath() ){
                    @Override
                    public String toString(){
                        return this.getName();
                    }
                };
                this.jCBListaReproduccion.addItem(f);
                this.jCBListaReproduccion.setSelectedItem(f);
            } catch (Exception ex) {
                System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_jMIAbrirAudioActionPerformed

    private void jBStopRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBStopRecordActionPerformed
        this.jBRecord.setVisible(true);
        this.jBStopRecord.setVisible(false);
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showSaveDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            //                Files.move( recordfile, dlg.getSelectedFile().getAbsoluteFile() );
            File f = new File( dlg.getSelectedFile().getAbsolutePath() ){
                @Override
                public String toString(){
                    return this.getName();
                }
            };
            recordfile.renameTo(f);
            this.jCBListaReproduccion.addItem(f);
            this.jCBListaReproduccion.setSelectedItem(f);

        }
    }//GEN-LAST:event_jBStopRecordActionPerformed

    private void jBCamRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCamRecordActionPerformed
        VentanaInternaCamara vCamara = VentanaInternaCamara.getInstance();
        if( vCamara != null ){
            jDesktop.add(vCamara);
            vCamara.setVisible(true);
        }
    }//GEN-LAST:event_jBCamRecordActionPerformed

    private void jBColorTrazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBColorTrazoActionPerformed
        VentanaInterna vi = (VentanaInterna) jDesktop.getSelectedFrame();
        if( vi != null ){
            CPanelPPN colorPanel = new CPanelPPN( this, true );
            colorPanel.setVisible(true);
            jBColorTrazo.setBackground(colorPanel.getColor());
            vi.getLienzo().setcTrazo(colorPanel.getColor());
            if( jCBShape.getSelectedItem() != null ){
                ShapePPN shape = (ShapePPN)jCBShape.getSelectedItem();
                shape.setColorTrazo( colorPanel.getColor() );
                vi.getLienzo().repaint();
            }
            
        }
            
    }//GEN-LAST:event_jBColorTrazoActionPerformed

    private void jBColorD1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBColorD1ActionPerformed
        VentanaInterna vi = (VentanaInterna) jDesktop.getSelectedFrame();
        if( vi != null){
            CPanelPPN colorPanel = new CPanelPPN( this, true );
            colorPanel.setVisible(true);
            jBColorD1.setBackground(colorPanel.getColor());
            vi.getLienzo().setfColor1(colorPanel.getColor());
            if( jCBShape.getSelectedItem() != null && !(jCBShape.getSelectedItem() instanceof LinePPN) ){
                FShapePPN shape = (FShapePPN)jCBShape.getSelectedItem();
                shape.setFcolor1(colorPanel.getColor() );
                vi.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_jBColorD1ActionPerformed

    private void jBColorD2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBColorD2ActionPerformed
        VentanaInterna vi = (VentanaInterna) jDesktop.getSelectedFrame();
        if( vi != null){
            CPanelPPN colorPanel = new CPanelPPN( this, true );
            colorPanel.setVisible(true);
            jBColorD2.setBackground(colorPanel.getColor());
            vi.getLienzo().setfColor2(colorPanel.getColor());
            if( jCBShape.getSelectedItem() != null && !(jCBShape.getSelectedItem() instanceof LinePPN) ){
                FShapePPN shape = (FShapePPN)jCBShape.getSelectedItem();
                shape.setFcolor2(colorPanel.getColor() );
                vi.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_jBColorD2ActionPerformed

    private void jBTranslateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTranslateActionPerformed
        VentanaInterna vi = (VentanaInterna) jDesktop.getSelectedFrame();
        ShapePPN shape = (ShapePPN) jCBShape.getSelectedItem();
        if( vi != null && shape != null){
            TPanelPPN tpanel = new TPanelPPN( this, true, shape);
            tpanel.setVisible(true);
            shape.setLocation(new Point(tpanel.getPX(), tpanel.getPY()));
            vi.getLienzo().setSelected(jCBShape.getSelectedIndex());
            vi.getLienzo().repaint();
        }
    }//GEN-LAST:event_jBTranslateActionPerformed

    private void jBDHorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDHorActionPerformed
        VentanaInterna vi = (VentanaInterna) jDesktop.getSelectedFrame();
        if( vi != null ){
            vi.getLienzo().setDirDegradado(FShapePPN.HOR);
            if( jCBShape.getSelectedItem() != null && !(jCBShape.getSelectedItem() instanceof LinePPN) ){
                FShapePPN shape = (FShapePPN)jCBShape.getSelectedItem();
                shape.setDirDegradado(FShapePPN.HOR);
                vi.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_jBDHorActionPerformed

    private void jBDVerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDVerActionPerformed
        VentanaInterna vi = (VentanaInterna) jDesktop.getSelectedFrame();
        if( vi != null ){
            vi.getLienzo().setDirDegradado(FShapePPN.VER);
            if( jCBShape.getSelectedItem() != null && !(jCBShape.getSelectedItem() instanceof LinePPN) ){
                FShapePPN shape = (FShapePPN)jCBShape.getSelectedItem();
                shape.setDirDegradado(FShapePPN.VER);
                vi.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_jBDVerActionPerformed

    private void jCBTrazoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBTrazoItemStateChanged
        VentanaInterna vi = (VentanaInterna) jDesktop.getSelectedFrame();
        if( vi != null ){
            vi.getLienzo().settTrazo(jCBTrazo.getSelectedIndex());
            if( jCBShape.getSelectedItem() != null){
                ShapePPN shape = (ShapePPN)jCBShape.getSelectedItem();
                shape.setTipoTrazo(jCBTrazo.getSelectedIndex());
                vi.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_jCBTrazoItemStateChanged

    private void jSRotateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSRotateStateChanged
        this.rotacionImagen(jSRotate.getValue());
    }//GEN-LAST:event_jSRotateStateChanged

    private void jSRotateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSRotateFocusGained
        this.addFocusItemToImage();
    }//GEN-LAST:event_jSRotateFocusGained

    private void jSRotateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSRotateFocusLost
        this.imgSource = null;
        jSRotate.setValue(0);
    }//GEN-LAST:event_jSRotateFocusLost

    private void jCBBarraImagenStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCBBarraImagenStateChanged
        jPImagen.setVisible(jCBBarraImagen.getState());
    }//GEN-LAST:event_jCBBarraImagenStateChanged

    private void jCBBarraSonidoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCBBarraSonidoStateChanged
       jPSonido.setVisible(jCBBarraSonido.getState());
    }//GEN-LAST:event_jCBBarraSonidoStateChanged

    private void jSTransStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSTransStateChanged
        VentanaInterna vi = (VentanaInterna) jDesktop.getSelectedFrame();
        if( vi != null ){
            vi.getLienzo().setTransp((float) jSTrans.getValue());
            if( jCBShape.getSelectedItem() != null ){
                ShapePPN shape = (ShapePPN)jCBShape.getSelectedItem();
                shape.setTransparent((float) jSTrans.getValue());
                vi.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_jSTransStateChanged

    private void jBColorMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBColorMaxActionPerformed
        VentanaInterna vi = (VentanaInterna) (this.jDesktop.getSelectedFrame());
        if(vi != null){
            this.imgSource = vi.getLienzo().getImagen();
            if(this.imgSource != null ){
                try{
                    ColorMaxOp colorMax = new ColorMaxOp();
                    colorMax.filter(imgSource, vi.getLienzo().getImagen());
                    vi.getLienzo().repaint();
                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
            this.imgSource = null;
        }
    }//GEN-LAST:event_jBColorMaxActionPerformed

    private void jBNegativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNegativoActionPerformed
       VentanaInterna vi = (VentanaInterna) (jDesktop.getSelectedFrame());
        if( vi != null ){
            this.imgSource = vi.getLienzo().getImagen();
            if( this.imgSource != null ){
                try{
                    int type = LookupTableProducer.TYPE_NEGATIVE;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(imgSource, imgSource);
                    vi.repaint();
                }catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jBNegativoActionPerformed

    private void jBPPNLookupOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPPNLookupOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (this.jDesktop.getSelectedFrame());

        if(vi != null){
            this.imgSource = vi.getLienzo().getImagen();
            if(this.imgSource != null){
                try{

                    byte lt[] = new byte[256];
                    lt[0] = 0;
                    for(int i = 1; i < 256; i++ )
                        lt[i] = (byte) ((i*2)%256);
                    
                    ByteLookupTable bt = new ByteLookupTable(0, lt);
                    LookupTable lot = bt;
                    LookupOp lop = new LookupOp(lot, null);
                    lop.filter(this.imgSource, this.imgSource);
                    vi.getLienzo().repaint();

                }catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }

        }
    }//GEN-LAST:event_jBPPNLookupOpActionPerformed

    private void jBDuplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDuplicarActionPerformed
        VentanaInterna vi = (VentanaInterna) jDesktop.getSelectedFrame();
        if( vi != null ){
            this.imgSource = vi.getLienzo().getImagen();
            if(this.imgSource != null){
                ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                ColorConvertOp cop = new ColorConvertOp(cs, null);
                BufferedImage imgOut = cop.filter(this.imgSource, null);
                VentanaInterna vi_aux = this.newVentanaInterna();
                vi_aux.getLienzo().setImagen(imgOut);
                vi_aux.setTitle(vi.getTitle());
            }
        }
    }//GEN-LAST:event_jBDuplicarActionPerformed

    private void jBCompOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCompOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (this.jDesktop.getSelectedFrame());
        if(vi != null){
            this.imgSource = vi.getLienzo().getImagen();
            if(this.imgSource != null ){
                try{
                    ComponenteOp compOp = new ComponenteOp();
                    compOp.filter(imgSource, vi.getLienzo().getImagen());
                    vi.getLienzo().repaint();
                }catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
            this.imgSource = null;
        }
    }//GEN-LAST:event_jBCompOpActionPerformed

    private void jCBMInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBMInfoActionPerformed
        InfoAutorPPN info = new InfoAutorPPN(this, true);
        info.setVisible(true);
    }//GEN-LAST:event_jCBMInfoActionPerformed

    
    private void setDrawType(DrawType drawtype) {
        VentanaInterna vi = (VentanaInterna) jDesktop.getSelectedFrame();
        vi.getLienzo().setDrawtype(drawtype);
        switch (drawtype) {
            case POINT:
                this.jLDrawType.setText("Punto");
                break;
            case LINE:
                this.jLDrawType.setText("Linea");
                break;
            case RECTANGLE:
                this.jLDrawType.setText("Rectangulo");
                break;
            case ELLIPSE:
                this.jLDrawType.setText("Ovalo");
                break;

        }
    }

    public void setEnableButtoms(DrawType drawtype, boolean fill, boolean alisar, 
            boolean trans, int grosor, int dir, int tipotrazo) {
        switch (drawtype) {
            case LINE:
                jTBLine.setSelected(true);
                break;
            case RECTANGLE:
                jTBRectangle.setSelected(true);
                break;
            case ELLIPSE:
                jTBEllipse.setSelected(true);
                break;
            default:
                break;
        }
        jTBRender.setSelected(alisar);
        jTBFill.setSelected(fill);
        jSGrosor.setValue(grosor);
        jCBTrazo.setSelectedIndex(tipotrazo);
    }
    
    public void addToComboBoxItem( ArrayList<ShapePPN> vShape ){
        jCBShape.removeAllItems();
        vShape.forEach((s) -> {
            jCBShape.addItem(s);            
        });
        jCBShape.setSelectedItem(null);
    }

    public void addFocusItemToImage() {
        VentanaInterna vi = (VentanaInterna) this.jDesktop.getSelectedFrame();
        if (vi != null) {
            if (vi.getLienzo().getImagen() != null) {
                ColorModel cm = vi.getLienzo().getImagen().getColorModel();
                WritableRaster raster = vi.getLienzo().getImagen().copyData(null);
                boolean alfaPre = vi.getLienzo().getImagen().isAlphaPremultiplied();
                imgSource = new BufferedImage(cm, raster, alfaPre, null);
            }
        }
    }
    
    public void rotacionImagen(double valor){
        VentanaInterna vi = (VentanaInterna) (jDesktop.getSelectedFrame());
        
        if( vi != null ){
            try{
                double r = Math.toRadians(valor);
                Point p = new Point(this.imgSource.getWidth()/2, this.imgSource.getHeight()/2);
                AffineTransform at = AffineTransform.getRotateInstance(r, p.x, p.y);
                AffineTransformOp atop;
                atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imOut = atop.filter(this.imgSource, null);
                vi.getLienzo().setImagen(imOut);
                vi.getLienzo().repaint();
            }catch(Exception e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }
    
    public void zoomImagen(double valor){
        VentanaInterna vi = (VentanaInterna) (jDesktop.getSelectedFrame());
        if(vi != null){
            this.imgSource = vi.getLienzo().getImagen();
            try{
                AffineTransform at = AffineTransform.getScaleInstance(valor, valor);
                AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgDest = atop.filter(this.imgSource, null);
                vi.getLienzo().setImagen(imgDest);
                vi.getLienzo().repaint();
            }catch(Exception e){
                System.err.println(e.getLocalizedMessage());
            }
            this.imgSource = null;
        }
    }
    
    public VentanaInterna newVentanaInterna(){
        VentanaInterna vi = new VentanaInterna(this);
        jDesktop.add(vi);
        vi.setLocation(jDesktop.getSelectedFrame().getLocation().x + 15, jDesktop.getSelectedFrame().getLocation().y + 15);
        vi.setVisible(true);
        return vi;
    }
    
    public VentanaInterna newVentanaInterna( int w, int h ){
        VentanaInterna vi = new VentanaInterna(this, w, h);
        jDesktop.add(vi);
        if( jDesktop.getSelectedFrame() != null )
            vi.setLocation(jDesktop.getSelectedFrame().getLocation().x + 15, jDesktop.getSelectedFrame().getLocation().y + 15);
        vi.setVisible(true);
        return vi;
    }
    
    
    public void repaintAllFrames(){
        for( int i = 0; i < this.jDesktop.getAllFrames().length; ++i ){
            VentanaInterna vi = (VentanaInterna) (this.jDesktop.getAllFrames()[i]);
            vi.getLienzo().repaint();
        }
    }
    

    
    public void deleteSelectedShape(){
        VentanaInterna vi = (VentanaInterna) jDesktop.getSelectedFrame();
        vi.getLienzo().deleteBound();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel JPEscala;
    private javax.swing.ButtonGroup bGDraw;
    private javax.swing.JButton jBBandas;
    private javax.swing.JButton jBCamRecord;
    private javax.swing.JButton jBColorD1;
    private javax.swing.JButton jBColorD2;
    private javax.swing.JButton jBColorMax;
    private javax.swing.JButton jBColorTrazo;
    private javax.swing.JButton jBCompOp;
    private javax.swing.JButton jBContraste;
    private javax.swing.JButton jBDHor;
    private javax.swing.JButton jBDVer;
    private javax.swing.JButton jBDuplicar;
    private javax.swing.JButton jBEcualizador;
    private javax.swing.JButton jBIluminar;
    private javax.swing.JButton jBNegativo;
    private javax.swing.JButton jBNew;
    private javax.swing.JButton jBOpen;
    private javax.swing.JButton jBOscurecer;
    private javax.swing.JButton jBPPNLookupOp;
    private javax.swing.JButton jBPlay;
    private javax.swing.JButton jBRecord;
    private javax.swing.JButton jBSave;
    private javax.swing.JButton jBScaleMinus;
    private javax.swing.JButton jBScalePlus;
    private javax.swing.JButton jBSeno;
    private javax.swing.JButton jBSepia;
    private javax.swing.JButton jBStop;
    private javax.swing.JButton jBStopRecord;
    private javax.swing.JButton jBTinte;
    private javax.swing.JButton jBTranslate;
    private javax.swing.JComboBox<String> jCBBandas;
    private javax.swing.JCheckBoxMenuItem jCBBarraFormas;
    private javax.swing.JCheckBoxMenuItem jCBBarraImagen;
    private javax.swing.JCheckBoxMenuItem jCBBarraSonido;
    private javax.swing.JComboBox<String> jCBFiltros;
    private javax.swing.JComboBox<File> jCBListaReproduccion;
    private javax.swing.JCheckBoxMenuItem jCBMBarraAtributos;
    private javax.swing.JCheckBoxMenuItem jCBMBarraEstado;
    private javax.swing.JMenuItem jCBMInfo;
    private javax.swing.JComboBox<ShapePPN> jCBShape;
    private javax.swing.JComboBox<String> jCBTrazo;
    private javax.swing.JDesktopPane jDesktop;
    private javax.swing.JLabel jLDrawType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMArchivo;
    private javax.swing.JMenu jMAyuda;
    private javax.swing.JMenuItem jMBGrabarAudio;
    private javax.swing.JMenuItem jMIAbrir;
    private javax.swing.JMenuItem jMIAbrirAudio;
    private javax.swing.JMenuItem jMIGuardar;
    private javax.swing.JMenuItem jMINuevo;
    private javax.swing.JMenu jMVer;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPBarraAtrib;
    private javax.swing.JPanel jPBarraEstados;
    private javax.swing.JPanel jPBarraFormas;
    private javax.swing.JPanel jPBrillo;
    private javax.swing.JPanel jPColor;
    private javax.swing.JPanel jPContrasteF;
    private javax.swing.JPanel jPFiltro;
    private javax.swing.JPanel jPFunciones;
    private javax.swing.JPanel jPImagen;
    private javax.swing.JPanel jPRotacion;
    private javax.swing.JPanel jPSonido;
    private javax.swing.JPanel jPUmbral;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSlider jSBrillo;
    private javax.swing.JSpinner jSGrosor;
    private javax.swing.JSlider jSRotate;
    private javax.swing.JSpinner jSTrans;
    private javax.swing.JSlider jSUmbral;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JSeparator jSeparator14;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JToggleButton jTBEllipse;
    private javax.swing.JToggleButton jTBFill;
    private javax.swing.JToggleButton jTBLine;
    private javax.swing.JToggleButton jTBRectangle;
    private javax.swing.JToggleButton jTBRender;
    // End of variables declaration//GEN-END:variables
    private BufferedImage imgSource = null;
    SMClipPlayer player = null;
    SMSoundRecorder recorder = null;
    public File recordfile = null;
    boolean focusCBShape;
}
